import pygame
import random
import sys
import math

# Initialize Pygame
pygame.init()

# Constants
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
FPS = 60

# Colors
WHITE  = (255, 255, 255)
RED    = (255,   0,   0)
GREEN  = (  0, 255,   0)
BLACK  = (  0,   0,   0)
BLUE   = (  0,   0, 255)
YELLOW = (255, 255,   0)
PURPLE = (160,  32, 240)

# Setup Display
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Bullet Hell Game")
clock = pygame.time.Clock()

# Font
font = pygame.font.SysFont(None, 36)

# Sprite Groups
all_sprites   = pygame.sprite.Group()
bullets       = pygame.sprite.Group()
bosses        = pygame.sprite.Group()
enemy_bullets = pygame.sprite.Group()
enemies       = pygame.sprite.Group()  # Added enemies group

# Player Class
class Player(pygame.sprite.Sprite):
    def __init__(self):
        super(Player, self).__init__()
        self.image = pygame.Surface((30, 20))
        self.image.fill(WHITE)
        self.rect = self.image.get_rect()
        self.rect.centerx = SCREEN_WIDTH / 2
        self.rect.bottom  = SCREEN_HEIGHT - 10
        self.speed = 5
        self.last_shot = pygame.time.get_ticks()
        self.shoot_delay = 250
        self.lives = 3

    def update(self):
        keys = pygame.key.get_pressed()
        # Movement controls
        if keys[pygame.K_LEFT]:
            self.rect.x -= self.speed
            if self.rect.left < 0:
                self.rect.left = 0
        if keys[pygame.K_RIGHT]:
            self.rect.x += self.speed
            if self.rect.right > SCREEN_WIDTH:
                self.rect.right = SCREEN_WIDTH
        if keys[pygame.K_UP]:
            self.rect.y -= self.speed
            if self.rect.top < 0:
                self.rect.top = 0
        if keys[pygame.K_DOWN]:
            self.rect.y += self.speed
            if self.rect.bottom > SCREEN_HEIGHT:
                self.rect.bottom = SCREEN_HEIGHT
        # Shooting
        if keys[pygame.K_SPACE]:
            self.shoot()

    def shoot(self):
        now = pygame.time.get_ticks()
        if now - self.last_shot > self.shoot_delay:
            self.last_shot = now
            bullet1 = Bullet(self.rect.left + 5, self.rect.top)
            bullet2 = Bullet(self.rect.right - 5, self.rect.top)
            all_sprites.add(bullet1, bullet2)
            bullets.add(bullet1, bullet2)

    # Draw the player's hitbox (a point)
    def draw_hitbox(self, surface):
        pygame.draw.circle(surface, RED, (self.rect.centerx, self.rect.centery), 3)

# Bullet Class
class Bullet(pygame.sprite.Sprite):
    def __init__(self, x, y):
        super(Bullet, self).__init__()
        self.image = pygame.Surface((5, 10))
        self.image.fill(RED)
        self.rect = self.image.get_rect()
        self.rect.centerx = x
        self.rect.bottom  = y
        self.speed  = -12
        self.damage = 50

    def update(self):
        self.rect.y += self.speed
        if self.rect.bottom < 0:
            self.kill()

# Enemy Bullet Class
class EnemyBullet(pygame.sprite.Sprite):
    def __init__(self, x, y, speedx, speedy):
        super(EnemyBullet, self).__init__()
        self.image = pygame.Surface((5, 10))
        self.image.fill(BLUE)
        self.rect = self.image.get_rect()
        self.rect.centerx = x
        self.rect.centery = y
        self.speedx  = speedx
        self.speedy  = speedy

    def update(self):
        self.rect.x += self.speedx
        self.rect.y += self.speedy
        if (self.rect.top > SCREEN_HEIGHT or self.rect.bottom < 0 or
            self.rect.left > SCREEN_WIDTH or self.rect.right < 0):
            self.kill()

# Enemy Class
class Enemy(pygame.sprite.Sprite):
    def __init__(self, entry_side):
        super(Enemy, self).__init__()
        self.image = pygame.Surface((30, 30))
        self.image.fill(GREEN)
        self.rect = self.image.get_rect()
        self.speed = 3
        self.last_shot = pygame.time.get_ticks()
        self.shoot_delay = 2000  # Enemies shoot every 2 seconds
        # Spawn enemy from different sides
        if entry_side == 'left':
            self.rect.x = -self.rect.width
            self.rect.y = random.randint(0, SCREEN_HEIGHT - self.rect.height)
            self.speedx = self.speed
            self.speedy = 0
        elif entry_side == 'right':
            self.rect.x = SCREEN_WIDTH
            self.rect.y = random.randint(0, SCREEN_HEIGHT - self.rect.height)
            self.speedx = -self.speed
            self.speedy = 0
        elif entry_side == 'top':
            self.rect.x = random.randint(0, SCREEN_WIDTH - self.rect.width)
            self.rect.y = -self.rect.height
            self.speedx = 0
            self.speedy = self.speed
        elif entry_side == 'bottom':
            self.rect.x = random.randint(0, SCREEN_WIDTH - self.rect.width)
            self.rect.y = SCREEN_HEIGHT
            self.speedx = 0
            self.speedy = -self.speed

    def update(self):
        self.rect.x += self.speedx
        self.rect.y += self.speedy
        # Shooting
        now = pygame.time.get_ticks()
        if now - self.last_shot > self.shoot_delay:
            self.last_shot = now
            self.shoot()
        # Remove enemy when it goes off-screen
        if (self.rect.top > SCREEN_HEIGHT or self.rect.bottom < 0 or
            self.rect.left > SCREEN_WIDTH or self.rect.right < 0):
            self.kill()

    def shoot(self):
        # Enemies shoot in their moving direction
        bullet = EnemyBullet(self.rect.centerx, self.rect.centery, self.speedx, self.speedy)
        all_sprites.add(bullet)
        enemy_bullets.add(bullet)

# Boss Class
class Boss(pygame.sprite.Sprite):
    def __init__(self, level, pattern):
        super(Boss, self).__init__()
        self.image = pygame.Surface((100, 60))
        self.image.fill(YELLOW)
        self.rect = self.image.get_rect()
        self.rect.centerx = SCREEN_WIDTH / 2
        self.rect.y = 50
        self.speed = 2
        self.direction = 1
        self.level = level
        # Increase health based on level
        self.health = 1000 + (self.level * 1000)
        self.max_health = self.health
        # Decrease shoot_delay based on level
        self.shoot_delay = max(2000 - (self.level * 300), 500)
        self.last_shot = pygame.time.get_ticks()
        self.pattern = pattern
        # For burst shooting
        self.burst_shots = 0
        self.burst_count = 3  # Number of bullets in a burst
        self.burst_delay = 100  # Time between shots in a burst
        self.burst_cooldown = 1000  # Time between bursts
        self.last_burst = pygame.time.get_ticks() - self.burst_cooldown
        # For summoning enemies
        self.summon_delay = 5000  # Time between summons
        self.last_summon = pygame.time.get_ticks() - self.summon_delay

    def update(self):
        # Boss movement
        self.rect.x += self.speed * self.direction
        if self.rect.right >= SCREEN_WIDTH or self.rect.left <= 0:
            self.direction *= -1
        self.shoot()
        self.summon_enemies()

    def shoot(self):
        now = pygame.time.get_ticks()
        if self.pattern == 'aimed':
            if now - self.last_burst > self.burst_cooldown:
                self.last_burst = now
                self.burst_shots = 0

            if self.burst_shots < self.burst_count:
                if now - self.last_shot > self.burst_delay:
                    self.last_shot = now
                    self.burst_shots +=1
                    # Shoot directly at the player
                    dx = player.rect.centerx - self.rect.centerx
                    dy = player.rect.centery - self.rect.centery
                    dist = math.hypot(dx, dy)
                    speed = 5 + self.level
                    vx = (dx / dist) * speed
                    vy = (dy / dist) * speed
                    bullet = EnemyBullet(self.rect.centerx, self.rect.centery, vx, vy)
                    all_sprites.add(bullet)
                    enemy_bullets.add(bullet)
        else:
            # Existing patterns (random, circle, spiral)
            if now - self.last_shot > self.shoot_delay:
                self.last_shot = now
                if self.pattern == 'random':
                    # Shoot bullets at random angles
                    num_bullets = 5 + self.level
                    for _ in range(num_bullets):
                        angle = random.uniform(0, 2 * math.pi)
                        speed = 4 + self.level
                        vx = math.cos(angle) * speed
                        vy = math.sin(angle) * speed
                        bullet = EnemyBullet(self.rect.centerx, self.rect.centery, vx, vy)
                        all_sprites.add(bullet)
                        enemy_bullets.add(bullet)
                elif self.pattern == 'circle':
                    # Shoot bullets in a circular pattern
                    num_bullets = 12 + (self.level * 2)
                    for i in range(num_bullets):
                        angle = (2 * math.pi / num_bullets) * i
                        speed = 3 + self.level
                        vx = math.cos(angle) * speed
                        vy = math.sin(angle) * speed
                        bullet = EnemyBullet(self.rect.centerx, self.rect.centery, vx, vy)
                        all_sprites.add(bullet)
                        enemy_bullets.add(bullet)
                elif self.pattern == 'spiral':
                    # Shoot bullets in a spiral pattern
                    num_bullets = 20
                    angle_offset = (now % 360) * (math.pi / 180)
                    for i in range(num_bullets):
                        angle = (2 * math.pi / num_bullets) * i + angle_offset
                        speed = 2 + self.level
                        vx = math.cos(angle) * speed
                        vy = math.sin(angle) * speed
                        bullet = EnemyBullet(self.rect.centerx, self.rect.centery, vx, vy)
                        all_sprites.add(bullet)
                        enemy_bullets.add(bullet)

    def summon_enemies(self):
        now = pygame.time.get_ticks()
        if now - self.last_summon > self.summon_delay:
            self.last_summon = now
            # Summon enemies from random sides
            entry_side = random.choice(['left', 'right', 'top', 'bottom'])
            enemy = Enemy(entry_side)
            all_sprites.add(enemy)
            enemies.add(enemy)

    def draw_health_bar(self, surface):
        bar_length = self.rect.width
        bar_height = 5
        fill = (self.health / self.max_health) * bar_length
        outline_rect = pygame.Rect(self.rect.x, self.rect.y - 10, bar_length, bar_height)
        fill_rect    = pygame.Rect(self.rect.x, self.rect.y - 10, fill, bar_height)
        pygame.draw.rect(surface, RED, fill_rect)
        pygame.draw.rect(surface, WHITE, outline_rect, 1)

# Function to Reset the Game
def reset_game():
    global all_sprites, bullets, bosses, enemy_bullets, enemies
    global player, level, boss_spawned, game_over
    all_sprites.empty()
    bullets.empty()
    bosses.empty()
    enemy_bullets.empty()
    enemies.empty()
    player = Player()
    all_sprites.add(player)
    level = 1
    boss_spawned = False
    game_over = False

# Create Player
player = Player()
all_sprites.add(player)

# Game Variables
level = 1
max_levels = 4
boss_spawned = False
game_over = False

# Boss Patterns per Level
boss_patterns = {
    1: 'aimed',
    2: 'random',
    3: 'circle',
    4: 'spiral'
}

# Main Game Loop
running = True
while running:
    clock.tick(FPS)

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.KEYDOWN and game_over:
            if event.key == pygame.K_r:
                reset_game()

    if not game_over:
        # Update all sprites
        all_sprites.update()

        # Collision detection between bullets and bosses
        hits_bosses = pygame.sprite.groupcollide(bosses, bullets, False, True)
        for boss, bullet_group in hits_bosses.items():
            for bullet in bullet_group:
                boss.health -= bullet.damage
                if boss.health <= 0:
                    boss.kill()
                    level += 1
                    boss_spawned = False
                    if level > max_levels:
                        game_over = True

        # Collision detection between enemy bullets and player
        hits = pygame.sprite.spritecollide(player, enemy_bullets, True, collided=lambda x, y: y.rect.collidepoint(player.rect.center))
        for hit in hits:
            player.lives -= 1
            if player.lives <= 0:
                game_over = True

        # Collision detection between enemies and player
        hits_enemies = pygame.sprite.spritecollide(player, enemies, True, collided=lambda x, y: y.rect.collidepoint(player.rect.center))
        for hit in hits_enemies:
            player.lives -= 1
            if player.lives <= 0:
                game_over = True

        # Collision detection between player's bullets and enemies
        hits_enemy = pygame.sprite.groupcollide(enemies, bullets, True, True)

        # Spawn boss if not present
        if not bosses and not boss_spawned and not game_over:
            pattern = boss_patterns.get(level, 'aimed')  # Default to 'aimed' if level not defined
            boss = Boss(level, pattern)
            all_sprites.add(boss)
            bosses.add(boss)
            boss_spawned = True

    # Draw everything
    screen.fill(BLACK)
    all_sprites.draw(screen)

    # Draw player's hitbox
    player.draw_hitbox(screen)

    # Draw Health Bars
    for boss in bosses:
        boss.draw_health_bar(screen)

    # Display Lives and Level
    lives_text = font.render(f'Lives: {player.lives}', True, WHITE)
    level_text = font.render(f'Level: {level}', True, WHITE)
    screen.blit(lives_text, (10, 10))
    screen.blit(level_text, (10, 50))

    # Display Game Over Message
    if game_over:
        over_text = font.render('Game Over - Press R to Restart', True, RED)
        screen.blit(over_text, (SCREEN_WIDTH / 2 - over_text.get_width() / 2, SCREEN_HEIGHT / 2))

    pygame.display.flip()

pygame.quit()
sys.exit()