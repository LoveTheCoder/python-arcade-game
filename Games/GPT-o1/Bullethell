import pygame
import random
import sys

# Initialize Pygame
pygame.init()

# Constants
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
FPS = 60

# Colors
WHITE = (255, 255, 255)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLACK = (0, 0, 0)
BLUE = (0, 0, 255)
YELLOW = (255, 255, 0)

# Setup Display
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Bullet Hell Game")
clock = pygame.time.Clock()

# Font
font = pygame.font.SysFont(None, 36)

# Sprite Groups
all_sprites = pygame.sprite.Group()
enemies = pygame.sprite.Group()
bullets = pygame.sprite.Group()
bosses = pygame.sprite.Group()
enemy_bullets = pygame.sprite.Group()

# Player Class
class Player(pygame.sprite.Sprite):
    def __init__(self):
        super(Player, self).__init__()
        self.image = pygame.Surface((30, 20))  # Smaller size
        self.image.fill(WHITE)
        self.rect = self.image.get_rect()
        self.rect.centerx = SCREEN_WIDTH / 2
        self.rect.centery = SCREEN_HEIGHT - 50
        self.speed = 5
        self.last_shot = pygame.time.get_ticks()
        self.shoot_delay = 250
        self.lives = 3

    def update(self):
        keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT]:
            self.rect.x -= self.speed
            if self.rect.left < 0:
                self.rect.left = 0
        if keys[pygame.K_RIGHT]:
            self.rect.x += self.speed
            if self.rect.right > SCREEN_WIDTH:
                self.rect.right = SCREEN_WIDTH
        if keys[pygame.K_UP]:
            self.rect.y -= self.speed
            if self.rect.top < 0:
                self.rect.top = 0
        if keys[pygame.K_DOWN]:
            self.rect.y += self.speed
            if self.rect.bottom > SCREEN_HEIGHT:
                self.rect.bottom = SCREEN_HEIGHT
        if keys[pygame.K_SPACE]:
            self.shoot()

    def shoot(self):
        now = pygame.time.get_ticks()
        if now - self.last_shot > self.shoot_delay:
            self.last_shot = now
            # Shoot two bullets with slight horizontal offsets
            bullet1 = Bullet(self.rect.left + 5, self.rect.top)
            bullet2 = Bullet(self.rect.right - 5, self.rect.top)
            all_sprites.add(bullet1, bullet2)
            bullets.add(bullet1, bullet2)
            print("Player shot two bullets")

# Bullet Class
class Bullet(pygame.sprite.Sprite):
    def __init__(self, x, y):
        super(Bullet, self).__init__()
        self.image = pygame.Surface((7, 14))  # Increased size for better visibility
        self.image.fill(RED)
        self.rect = self.image.get_rect()
        self.rect.centerx = x
        self.rect.bottom = y
        self.speed = -12  # Increased speed for responsiveness
        self.damage = 50  # Increased damage

    def update(self):
        self.rect.y += self.speed
        if self.rect.bottom < 0:
            self.kill()

# Enemy Class
class Enemy(pygame.sprite.Sprite):
    def __init__(self, level):
        super(Enemy, self).__init__()
        self.image = pygame.Surface((40, 30))
        self.image.fill(GREEN)
        self.rect = self.image.get_rect()
        self.rect.x = random.randint(0, SCREEN_WIDTH - self.rect.width)
        self.rect.y = -self.rect.height
        self.speedy = 2 + level
        self.speedx = random.choice([-1, 1]) * (level * 0.5)
        self.level = level
        self.last_shot = pygame.time.get_ticks()
        self.shoot_delay = max(500 - (level * 50), 200)
        self.health = 100 + (level * 50)

    def update(self):
        self.rect.y += self.speedy
        self.rect.x += self.speedx
        if self.rect.top > SCREEN_HEIGHT or self.rect.left < -self.rect.width or self.rect.right > SCREEN_WIDTH + self.rect.width:
            self.kill()
        self.shoot()

    def shoot(self):
        now = pygame.time.get_ticks()
        if now - self.last_shot > self.shoot_delay:
            self.last_shot = now
            direction = random.choice(['left', 'straight', 'right'])
            enemy_bullet = EnemyBullet(self.rect.centerx, self.rect.bottom, direction)
            all_sprites.add(enemy_bullet)
            enemy_bullets.add(enemy_bullet)
            print(f'Enemy at ({self.rect.x}, {self.rect.y}) shot a bullet to the {direction}')

    def draw_health_bar(self, surface):
        bar_length = self.rect.width
        bar_height = 5
        max_health = 100 + (self.level * 50)
        fill = (self.health / max_health) * bar_length
        outline_rect = pygame.Rect(self.rect.x, self.rect.y - 10, bar_length, bar_height)
        fill_rect = pygame.Rect(self.rect.x, self.rect.y - 10, fill, bar_height)
        pygame.draw.rect(surface, RED, fill_rect)
        pygame.draw.rect(surface, WHITE, outline_rect, 1)

# Enemy Bullet Class
class EnemyBullet(pygame.sprite.Sprite):
    def __init__(self, x, y, direction):
        super(EnemyBullet, self).__init__()
        self.image = pygame.Surface((5, 10))
        self.image.fill(BLUE)
        self.rect = self.image.get_rect()
        self.rect.centerx = x
        self.rect.top = y
        self.speedy = 5
        self.speedx = 0
        if direction == 'left':
            self.speedx = -3
        elif direction == 'right':
            self.speedx = 3

    def update(self):
        self.rect.y += self.speedy
        self.rect.x += self.speedx
        if self.rect.top > SCREEN_HEIGHT or self.rect.left < 0 or self.rect.right > SCREEN_WIDTH:
            self.kill()

# Boss Class
class Boss(pygame.sprite.Sprite):
    def __init__(self, level):
        super(Boss, self).__init__()
        self.image = pygame.Surface((100, 60))
        self.image.fill(RED)
        self.rect = self.image.get_rect()
        self.rect.centerx = SCREEN_WIDTH / 2
        self.rect.y = 50
        self.speed = 2 + level
        self.direction = 1
        self.level = level  # Ensure level is set
        self.health = 300 + (level * 100)
        self.last_shot = pygame.time.get_ticks()
        self.shoot_delay = max(1500 - (level * 200), 800)

    def update(self):
        self.rect.x += self.speed * self.direction
        if self.rect.right >= SCREEN_WIDTH or self.rect.left <= 0:
            self.direction *= -1
        self.shoot()

    def shoot(self):
        now = pygame.time.get_ticks()
        if now - self.last_shot > self.shoot_delay:
            self.last_shot = now
            directions = ['left', 'straight', 'right']
            for direction in directions:
                bullet = EnemyBullet(self.rect.centerx, self.rect.bottom, direction)
                all_sprites.add(bullet)
                enemy_bullets.add(bullet)
                print(f'Boss shot a bullet to the {direction}')

    def draw_health_bar(self, surface):
        bar_length = self.rect.width
        bar_height = 5
        max_health = 300 + (self.level * 100)
        fill = (self.health / max_health) * bar_length
        outline_rect = pygame.Rect(self.rect.x, self.rect.y - 10, bar_length, bar_height)
        fill_rect = pygame.Rect(self.rect.x, self.rect.y - 10, fill, bar_height)
        pygame.draw.rect(surface, YELLOW, fill_rect)
        pygame.draw.rect(surface, WHITE, outline_rect, 1)

# Function to Reset the Game
def reset_game():
    global all_sprites, enemies, bullets, bosses, enemy_bullets, player, level, boss_spawned, game_over
    all_sprites.empty()
    enemies.empty()
    bullets.empty()
    bosses.empty()
    enemy_bullets.empty()
    player = Player()
    all_sprites.add(player)
    level = 1
    boss_spawned = False
    game_over = False
    print("Game has been reset")

# Create Player
player = Player()
all_sprites.add(player)

# Game Variables
level = 1
max_levels = 4
enemy_spawn_time = 1000  # milliseconds
boss_spawned = False
game_over = False

# Timer for Enemy Spawning
enemy_event = pygame.USEREVENT + 1
pygame.time.set_timer(enemy_event, enemy_spawn_time)

# Main Game Loop
running = True
while running:
    clock.tick(FPS)

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == enemy_event and not boss_spawned and not game_over:
            enemy = Enemy(level)
            all_sprites.add(enemy)
            enemies.add(enemy)
            print(f'Enemy spawned at ({enemy.rect.x}, {enemy.rect.y})')
        elif event.type == pygame.KEYDOWN and game_over:
            if event.key == pygame.K_r:
                reset_game()

    if not game_over:
        # Update all sprites
        all_sprites.update()

        # Check for bullet-enemy collisions
        hits_enemies = pygame.sprite.groupcollide(enemies, bullets, False, True)
        print(f'Number of enemies hit this frame: {len(hits_enemies)}')
        for enemy, bullet_group in hits_enemies.items():
            for bullet in bullet_group:
                enemy.health -= bullet.damage
                print(f'Enemy hit! Remaining Health: {enemy.health}')
                if enemy.health <= 0:
                    enemy.kill()
                    print("Enemy killed")
                    level += 1
                    boss_spawned = False
                    if level > max_levels:
                        game_over = True
                        print("Reached max levels. Game Over.")

        # Check for bullet-boss collisions
        hits_bosses = pygame.sprite.groupcollide(bosses, bullets, False, True)
        print(f'Number of bosses hit this frame: {len(hits_bosses)}')
        for boss, bullet_group in hits_bosses.items():
            for bullet in bullet_group:
                boss.health -= bullet.damage
                print(f'Boss hit! Remaining Health: {boss.health}')
                if boss.health <= 0:
                    boss.kill()
                    print("Boss defeated")
                    level += 1
                    boss_spawned = False
                    if level > max_levels:
                        game_over = True
                        print("Reached max levels. Game Over.")

        # Check for enemy bullet collisions with player
        hits = pygame.sprite.spritecollide(player, enemy_bullets, True)
        for hit in hits:
            player.lives -= 1
            print(f'Player hit! Remaining Lives: {player.lives}')
            if player.lives <= 0:
                game_over = True
                print("Player has died. Game Over.")

        # Check if all enemies are defeated to spawn boss
        if not enemies and not boss_spawned and not game_over:
            boss = Boss(level)
            all_sprites.add(boss)
            bosses.add(boss)
            boss_spawned = True
            print("Boss spawned")

    # Draw everything
    screen.fill(BLACK)
    all_sprites.draw(screen)

    # Draw Health Bars for Enemies and Bosses
    for enemy in enemies:
        enemy.draw_health_bar(screen)
    for boss in bosses:
        boss.draw_health_bar(screen)

    # Display Lives and Level
    lives_text = font.render(f'Lives: {player.lives}', True, WHITE)
    level_text = font.render(f'Level: {level}', True, WHITE)
    screen.blit(lives_text, (10, 10))
    screen.blit(level_text, (10, 50))

    # Display Game Over Message
    if game_over:
        over_text = font.render('Game Over - Press R to Restart', True, RED)
        screen.blit(over_text, (SCREEN_WIDTH / 2 - over_text.get_width() / 2, SCREEN_HEIGHT / 2))

    pygame.display.flip()

pygame.quit()
sys.exit()